const cars = [ {
  name: '–î–µ–≤—è—Ç–∫–∞', price: 30500
}, {
  name: '–ú–æ—Å–∫–≤–∏—á 412', price: 27700
}, {
  name: 'BMW', price: 23100
} ]



class MyBestAwesomeArrayEver extends Array {

  find( predicate ) {
    /** *   - 1 -   ***/

    for ( let i = 0;this.length;i++ ) {
      const result = this[ i ]
      if ( predicate( result ) === true ) return result
    }

  }

  /**
   * @@@@@@@ CMT @@@@@@@
   * –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è predicate
   *
   * –¥–ª—è –≤—Å–µ—Ö –º–∞—Å—Å–∏–≤–æ–≤, –≥–¥–µ –Ω–µ—Ç true –≤–Ω—É—Ç—Ä–∏, –≤–µ—Ä–Ω—ë—Ç undefined
   *
   * –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è false
   *
   * –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .find
   *
   */
  some( predicate ) {
    { /** *   - 2 -   ***/ }

    for ( let i = 0; this.length; i++ ) {
      if ( this[ i ] === true ) return true
    }

    return
  }


  /**
   * @@@@@@@ CMT @@@@@@@
   * –ø–æ—á–µ–º—É isFinite? reduce –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —Å —á–∏—Å–ª–∞–º–∏,
   * –¥–∞–≤–∞–π –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–∏–º –µ—â—ë –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç –≤ reduce - initialValue
   *
   * –æ—Å—Ç–∞–ª—å–Ω–æ–µ üëç
   *
   */
  reduce( predicate ) {
    { /** *   - 4 -   ***/ }

    let value = arguments[ 0 ]

    for ( let i = 0; i < this.length; i++ ) {

      if ( !( isFinite( value ) ) ) {
        value = predicate( 0, this[ i ] )
      } else {
        value = predicate( value, this[ i ] )
      }

    }

    return value

  }
}


// –†–µ—à–µ–Ω–∏–µ 1.1
// –ü–æ—á–µ–º—É bmw –±—É–¥–µ—Ç —Ä–∞–≤–Ω–æ undefined? –ö–∞–∫ –Ω–∞–π—Ç–∏ –≤ –º–∞—Å—Å–∏–≤–µ cars –æ–±—ä–µ–∫—Ç BMW?
const bmw = cars.find( ( car ) => car.name === 'BMW' )

// –†–µ—à–µ–Ω–∏–µ 1.2

const car2 = MyBestAwesomeArrayEver.from( cars )

console.log( car2.find( ( car ) => car.name === 'BMW' ) )
// <------------------------ 2 ------------------------------->
// –†–µ—à–µ–Ω–∏–µ 2.1

console.log( cars.some( ( car ) => car.price > 30000 ) )

// –†–µ—à–µ–Ω–∏–µ 2.2
/**
 * @@@@@@@ CMT @@@@@@@
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ cars **–ù–ò** –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞ **–ù–ï** –¥–æ—Ä–æ–∂–µ –ø—è—Ç–∏–¥–µ—Å—è—Ç–∏ —Ç—ã—Å—è—á.
 */
console.log( cars.some( ( car ) => car.price > 50000 ) )

// –†–µ—à–µ–Ω–∏–µ 2.3
/**
 * @@@@@@@ CMT @@@@@@@
 * –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –º–∞—Å—Å–∏–≤–µ cars –Ω–∏ –æ–¥–Ω–∞ –º–∞—à–∏–Ω–∞ **–ù–ï** –¥–æ—Ä–æ–∂–µ –ø—è—Ç–∏–¥–µ—Å—è—Ç–∏ —Ç—ã—Å—è—á
 */
console.log( cars.every( ( car ) => car.price > 50000 ) )

// –†–µ—à–µ–Ω–∏–µ 2.4
console.log( cars.every(
  /**
   * @@@@@@@ CMT @@@@@@@
   * –∏–ª–∏
   * ( car ) => typeof car.name === string && car.name !== ''
   *
   * –∏–ª–∏
   * ( { name } ) => typeof name === string && name !== ''
   */
  ( car ) => car.hasOwnProperty( 'name' ) && ( car.name !== undefined ) && ( car.name !== '' ) )

)
// <------------------------ 3 ------------------------------->

// –†–µ—à–µ–Ω–∏–µ 3.1
console.log( cars.map( ( elem ) => elem.price ).includes( 27700 ) )

// –†–µ—à–µ–Ω–∏–µ 3.2
/**
 * @@@@@@@ CMT @@@@@@@
 * –µ—â—ë –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .some, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean
 */
console.log( !!cars.find( ( elem ) => elem.price === 27700 ) )

// –†–µ—à–µ–Ω–∏–µ 3.3
console.log( cars.find( ( elem ) => elem.name.includes( '12' ) ).name )

// <------------------------ 4 ------------------------------->
// –†–µ—à–µ–Ω–∏–µ 4.1
console.log( cars.reduce( ( acum, elem ) => acum + elem.price, 0 ) )

// –†–µ—à–µ–Ω–∏–µ 4.2

// <------------------------ 5 ------------------------------->
console.log( cars.sort( ( elem1, elem2 ) => elem1.price - elem2.price ) )


cars.splice( ( () => {
  const index = cars.findIndex( ( elem ) => {

    if ( elem.name.indexOf( '–≤' ) ) return true

  } )
  return index

} )(), 1 )

console.log( cars )

// –†–µ—à–µ–Ω–∏–µ 6.2

function v( obj ) {
  return obj.findIndex( ( elem ) => elem.name.includes( '–≤' ) )

}

function transmit( obj, index ) {
  obj.push( obj[ index ] )
  obj.splice( index, 1 )
}

// –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ —Å –±—É–∫–≤–æ–π –≤ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
cars.splice( ( () => cars.findIndex( ( elem ) => elem.name.includes( '–≤' ) ) )(), 1 )

transmit( cars, v( cars ) )
console.log( cars )
